// Mocks generated by Mockito 5.4.6 from annotations
// in WorldExplorer/test/viewmodels/country_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:world_explorer/data/models/country.dart' as _i2;
import 'package:world_explorer/data/models/openweather_forecast_day.dart' as _i5;
import 'package:world_explorer/data/repositories/country_repository.dart' as _i3;
import 'package:world_explorer/data/api/geocoding_helper.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCountry_0 extends _i1.SmartFake implements _i2.Country {
  _FakeCountry_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CountryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCountryRepository extends _i1.Mock implements _i3.CountryRepository {
  MockCountryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Country> getCountryDetails(String? countryCode) =>
      (super.noSuchMethod(
            Invocation.method(#getCountryDetails, [countryCode]),
            returnValue: _i4.Future<_i2.Country>.value(
              _FakeCountry_0(
                this,
                Invocation.method(#getCountryDetails, [countryCode]),
              ),
            ),
          )
          as _i4.Future<_i2.Country>);

  @override
  _i4.Future<List<_i5.ForecastDay>> getWeatherForecast(
    double? lat,
    double? lon,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getWeatherForecast, [lat, lon]),
            returnValue: _i4.Future<List<_i5.ForecastDay>>.value(
              <_i5.ForecastDay>[],
            ),
          )
          as _i4.Future<List<_i5.ForecastDay>>);

  @override
  _i4.Future<Map<String, String>> getCurrencySymbols() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrencySymbols, []),
            returnValue: _i4.Future<Map<String, String>>.value(
              <String, String>{},
            ),
          )
          as _i4.Future<Map<String, String>>);

  @override
  _i4.Future<String> getCurrencyFromCountryCode(String? countryCode) =>
      (super.noSuchMethod(
            Invocation.method(#getCurrencyFromCountryCode, [countryCode]),
            returnValue: _i4.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#getCurrencyFromCountryCode, [countryCode]),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<double> getExchangeRate(
    String? fromCurrency,
    String? toCurrency,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getExchangeRate, [fromCurrency, toCurrency]),
            returnValue: _i4.Future<double>.value(0.0),
          )
          as _i4.Future<double>);
}

/// A class which mocks [GeocodingHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeocodingHelper extends _i1.Mock implements _i7.GeocodingHelper {
  MockGeocodingHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<String, String>?> getCountryInfo(double? lat, double? lng) =>
      (super.noSuchMethod(
            Invocation.method(#getCountryInfo, [lat, lng]),
            returnValue: _i4.Future<Map<String, String>?>.value(),
          )
          as _i4.Future<Map<String, String>?>);
}
